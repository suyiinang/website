height <- c(25,18,40,45,35)
height(5)
install.packages('blogdown')
blogdown:::new_post_addin()
blogdown::check_site()
blogdown::clean_duplicates(preview = FALSE)
blogdown::build_site(build_rmd = 'newfile')
warnings()
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = TRUE)
packages = c('tidyverse', 'ggplot2', 'skimr', 'naniar', 'kableExtra','dplyr', 'ggstatsplot','plotly', 'readr','haven','funModeling','crosstalk','data.table', 'skimr', 'ggmosaic','ggExtra','ggpubr','sf','tmap','sp', 'leaflet')
for(p in packages){
if(!require(p, character.only = T)){
install.packages(p)
}
library(p, character.only = T)
}
listings <- read_csv("./data/raw/listings.csv")
glimpse(listings)
listings2 <- listings %>%
select(-id, -listing_url, -scrape_id, -neighborhood_overview, -picture_url, -host_id, -host_url, -host_name, -host_location, -host_thumbnail_url, -host_picture_url, -first_review, -last_review, -last_scraped, -calendar_last_scraped, -has_availability, -host_has_profile_pic, -calendar_updated, -license, -bathrooms, -neighbourhood, -host_neighbourhood)
# convert textual data to structured data
listings3 <- listings2 %>%
mutate_at(vars(name,description,host_about),str_squish) %>% #remove all whitespaces
mutate(name_length = str_count(name, ".")) %>% #count characters
mutate(description_length = str_count(description, ".")) %>%
mutate(host_about_length = str_count(host_about, ".")) %>%
select(-name, -description, -host_about)
# convert textual data to structured data
listings3 <- listings3 %>%
mutate(bathrooms_text = tolower(bathrooms_text)) %>%
mutate(bathrooms_text = str_replace(bathrooms_text, "half", "0.5")) %>%
mutate(bathroom = parse_number(bathrooms_text)) %>%
mutate(bathroom_type = case_when(
str_detect(bathrooms_text, "private") ~ "Private",
str_detect(bathrooms_text, "share") ~ "Shared",
TRUE ~ "Other")
) %>%
select(-bathrooms_text)
# replace amenities with count of amenities
listings3 <- listings3 %>%
mutate(amenities_count = sapply(str_split(amenities, ","), length)) %>%
select(-amenities)
# replace host_verification with count of verification
listings3 <- listings3 %>%
mutate(host_verifications_count = sapply(str_split(host_verifications, ","), length)) %>%
select(-host_verifications)
listings4 <- listings3 %>%
mutate(days_joined = as.numeric(as.Date("2021/01/01",
"%Y/%m/%d")-host_since)) %>%
select(-host_since)
# get actual property type (remove room type component) from property_type
listings5 <- listings4 %>%
mutate(property_type = tolower(property_type)) %>%
mutate(property_type = case_when(
grepl(" in ", property_type, fixed = TRUE) == TRUE ~ gsub("^.*in ", "", property_type),
TRUE ~ gsub("entire ", "", property_type)
))
listings5 <- listings5 %>%
mutate_at(vars(c(contains("price"))), ~as.numeric(str_replace(., "\\$", ""))) %>% #price to numeric
mutate_at(vars(c(contains("rate"))), ~as.numeric(str_replace(., "\\%", ""))) #rate to numeric
#remove listing with $0 price
listings6 <- listings5 %>%
filter(price!=0)
listings6 <- listings6 %>%
mutate(across(where(is.character), as.factor)) %>% #convert character to factor
mutate(across(where(is.logical), as.factor)) #convert logical to factor
listings6$host_response_time[is.na(listings6$host_response_time)] <- "N/A"
final_listing <- subset(listings6, !is.na(host_is_superhost))
glimpse(final_listing)
skimDf <- final_listing %>%
skim_without_charts()
sum_data <- skim(final_listing) %>% summary()
sum_n <-if ("numeric" %in% skimDf$skim_type){
skimDf %>%
yank('numeric') %>%
select('skim_variable','n_missing','complete_rate',
'mean','sd','p0','p50','p100') %>%
arrange(-n_missing)
}
sum_f <-if ("factor" %in% skimDf$skim_type){skimDf %>% yank("factor")}
DT::datatable(sum_data)
DT::datatable(sum_n)
DT::datatable(sum_f)
set.seed(123) # for reproducibility
g_hist <- gghistostats(
data = final_listing,
x = review_scores_rating,
title = paste('Distribution of review_scores_rating'),
normal.curve = TRUE,
normal.curve.args = list(color = "#00A699", size = 1),
bar.fill = '#FF5A5F', #use airbnb colour
ggtheme = ggplot2::theme_classic(),
type = 'parametric',
conf.level = 0.95,
)
g_hist
ggplotly(g_hist)
hist <- ggplot(final_listing, aes(x = review_scores_rating)) +
ggtitle("Distribution of review_scores_rating") +
xlab('review_scores_rating') +
theme_bw() +
geom_histogram(bins = 10,
color = '#767676',
fill = '#FF5A5F',
aes(y=..density..,
fill=..count..),
alpha=0.5) +
stat_function(fun = dnorm,
args = list(mean = mean(final_listing$review_scores_rating),
sd = sd(final_listing$review_scores_rating))) + #normal curve doesn't appear
geom_vline(aes(xintercept=mean(final_listing$review_scores_rating,na.rm=T)),
color="#00A699",
linetype="dashed",
size=1)+
geom_vline(aes(xintercept=median(final_listing$review_scores_rating,na.rm=T)),
color="#484848",
linetype="dashed",
size=1)
bar <- ggplot(final_listing, aes(x = room_type)) +
ggtitle("Distribution of room_type") +
xlab('room_type') +
theme_bw() +
geom_histogram(stat = 'count',
color = '#767676',
fill = '#FF5A5F')
ggplotly(hist)
t.test(final_listing$review_scores_rating,mu = 100, alternative = 'two.sided',conf.level = 0.95)
boxchart <- ggplot(final_listing,
aes(x = '',
y = review_scores_rating,
colour = '#FF5A5F')) +
geom_boxplot() +
coord_flip() +
stat_boxplot(geom ='errorbar') +
stat_summary(fun.y=mean, geom="point", shape=5, size=4)+
labs(title = "Outlier boxplot using ggplot and ggplotly") +
xlab('review_scores_rating') +
theme_classic() +
theme(legend.position = 'none')
ggplotly(boxchart)
p1 <- ggplot(final_listing,
aes(host_listings_count, review_scores_rating, colour = host_is_superhost)) +
geom_point()
p2<-ggMarginal(p1, groupColour = TRUE, groupFill = TRUE)
p2
ggscatterstats(
data = final_listing,
x = review_scores_rating,
y = amenities_count,
conf.level = 0.95,
xlab = "Review_scores_rating",
ylab = "amenities_count",
marginal.type = 'density',
title = 'Scatterplot of using ggstatsplot')
grouped_ggscatterstats( #changed this
data = final_listing,
x = review_scores_rating,
y = amenities_count,
grouping.var = host_is_superhost, #added this
conf.level = 0.95,
type = 'pearson',
xlab = "Review_scores_rating",
ylab = "amenities_count",
marginal.type = 'boxplot', #boxplot instead of density
plot.grid.args = list(nrows =1, ncol = 2)) #to view in one row
scatter <- ggplot(final_listing, aes(x = review_scores_rating, y= amenities_count)) +
geom_point(aes(fill = host_is_superhost)) +
geom_smooth(method = 'lm', se = FALSE) +
facet_wrap(vars(host_is_superhost)) +
ggtitle('Scatterplot using ggplot2')
ggplotly(scatter)
cor.test(final_listing$review_scores_rating, final_listing$amenities_count, conf.level = 0.95)
ggbarstats(data = final_listing,
x = host_is_superhost,
y = room_type,
title = paste('Mosaic plot using ggstatsplot'),
type = 'parametric',
conf.level = 0.95,
proportion.test = TRUE,
ggtheme = ggplot2::theme_classic())
m <- ggplot(final_listing) +
geom_mosaic(aes(x=  product(host_is_superhost, room_type),
fill = host_is_superhost)) +
labs(
title = paste("Mosaic plot using ggmosaic and plotly"),
x = 'room_type',
y = 'host_is_superhost') +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x = element_text(angle = 90))
## chisq test
chisq <- chisq.test(x = final_listing$host_is_superhost,y = final_listing$room_type)
#output
ggplotly(m)
chisq
ggbetweenstats(
data = final_listing,
x = 'host_is_superhost',
y = 'price',
title = 'Violin plot using ggstatsplot',
type = 'parametric',
conf.level = 0.95,
pairwise.comparisons = TRUE,
pairwise.display = 'significant',
p.adjust.method = 'holm',
ggtheme = ggplot2::theme_classic()
)
base <- ggplot(final_listing, aes(host_is_superhost, y = price)) +
labs(
title = 'Boxplot and violin plot using ggplot2',
x = 'host_is_superhost',
y = 'price')
bbox <- geom_boxplot(aes(fill = host_is_superhost),outlier.shape = NA)
box <- base + bbox + stat_compare_means(method = 't.test')
boxly <- ggplotly(box)
boxly
t.test(price ~ host_is_superhost, final_listing, var.equal = FALSE)
#load subzone data
mpsz <- st_read(dsn = 'data/spatial',
layer = 'MP14_SUBZONE_WEB_PL',
crs = 3414)
#transform
singapore <- st_transform(mpsz, 4326)
#convert long lat to sf object
final_listing_exN <- subset(final_listing, !is.na(host_is_superhost))
listings_sf <- st_as_sf(final_listing_exN,
coords = c('longitude', 'latitude'),
crs = 4326) %>%
st_transform(crs = 3414)
#plot map
p_map <-tm_shape(mpsz) +
tm_polygons() +
tm_shape(listings_sf) +
tm_bubbles(col = 'host_is_superhost',
size = 'price',
border.col = 'black',
border.lwd = 1,
alpha = 0.8)+
tm_facets(by='host_is_superhost',
nrow = 1 ,
sync = TRUE)+
tm_layout(main.title = 'Point Symbol map by price and host_is_superhost',
legend.outside.position = 'bottom',
legend.stack = 'horizontal')
p_map
leaflet(data = final_listing) %>%
addTiles() %>%
addCircleMarkers(lng = ~longitude,
lat = ~latitude,
label = ~as.character(final_listing$host_is_superhost),
clusterOptions = markerClusterOptions())
# load subzone map
mpsz2 <- st_read(dsn = 'data/spatial',
layer = 'MP14_SUBZONE_WEB_PL',
quiet = TRUE) %>%
group_by(PLN_AREA_N) %>%
summarise(geometry = sf::st_union(geometry))
# collapse dataframe and summarise price by neighbourhood
listing_summary <- final_listing %>%
group_by(neighbourhood_cleansed) %>%
summarise(count = n(),
avg_price = mean(price),
min_price = min(price),
max_price = max(price)) %>%
mutate_at(.vars = vars(neighbourhood_cleansed), .funs= funs(toupper))
# join by neighbourhood and planning area
airbnb_map <- right_join(mpsz2,listing_summary, c("PLN_AREA_N" = 'neighbourhood_cleansed'))
# create map
map <- tm_shape(mpsz2)+
tm_polygons()+
tm_shape(airbnb_map) +
tm_fill('avg_price',
n = 6,
style = 'quantile',
palette = 'Blues')+
tm_borders(alpha = 0.5)
# make map interactive
tmap_mode('view')
map
x <- listing_summary[['neighboourhood_cleansed']]
x
x <- listing_summary['neighboourhood_cleansed']
x <- listing_summary[['neighbourhood_cleansed']]
x
listing_summary$neighbourhood_cleansed
# load geojson file
hood <- geojsonio::geojson_read('data/neighbourhoods.geojson', what = 'sp')
# assign palette based on numeric factors
mypalette <- colorNumeric("viridis", NULL , reverse = TRUE)
labels <- sprintf(
"<strong>%s</strong><br/> Avg price: $%g",
listing_summary[['neighbourhood_cleansed']], round(listing_summary[['avg_price']],1)
) %>% lapply(htmltools::HTML)
# create map
l_m <- leaflet(hood) %>%
addTiles() %>%
addProviderTiles('Esri.WorldGrayCanvas') %>% #grey background
addPolygons(stroke = TRUE,
color = 'white',
weight = 1,
smoothFactor = 0.3,
fillOpacity = 1,
fillColor = ~mypalette(log10(y)), #log for better differentiation
label = labels) %>%
addLegend("bottomright", pal = mypalette, values = ~listing_summary[['avg_price']],
title = "Avg Price",
labFormat = labelFormat(prefix = "SGD"),
opacity = 1
)
# create map
l_m <- leaflet(hood) %>%
addTiles() %>%
addProviderTiles('Esri.WorldGrayCanvas') %>% #grey background
addPolygons(stroke = TRUE,
color = 'white',
weight = 1,
smoothFactor = 0.3,
fillOpacity = 1,
fillColor = ~mypalette(log10(listing_summary[['avg_price']])), #log for better differentiation
label = labels) %>%
addLegend("bottomright", pal = mypalette, values = ~listing_summary[['avg_price']],
title = "Avg Price",
labFormat = labelFormat(prefix = "SGD"),
opacity = 1
)
l_m
blogdown::build_site(build_rmd = 'newfile')
hist <- ggplot(final_listing, aes(x = review_scores_rating)) +
ggtitle("Distribution of review_scores_rating") +
xlab('review_scores_rating') +
theme_bw() +
geom_histogram(bins = 10,
color = '#767676',
fill = '#FF5A5F',
aes(y=..density..,
fill=..count..),
alpha=0.5) +
stat_function(fun = dnorm,
args = list(mean = mean(final_listing[['review_scores_rating']]),
sd = sd(final_listing[['review_scores_rating']]))) + #normal curve doesn't appear
geom_vline(aes(xintercept=mean(final_listing[['review_scores_rating']],na.rm=T)),
color="#00A699",
linetype="dashed",
size=1)+
geom_vline(aes(xintercept=median(final_listing[['review_scores_rating']],na.rm=T)),
color="#484848",
linetype="dashed",
size=1)
bar <- ggplot(final_listing, aes(x = room_type)) +
ggtitle("Distribution of room_type") +
xlab('room_type') +
theme_bw() +
geom_histogram(stat = 'count',
color = '#767676',
fill = '#FF5A5F')
ggplotly(hist)
listings6[['host_response_time']][is.na(listings6[['host_response_time']])] <- "N/A"
final_listing <- subset(listings6, !is.na(host_is_superhost))
warning()
blogdown::build_site(build_rmd = 'newfile')
Sys.which('hugo')
blogdown:::find_hugo()
blogdown::hugo_version()
devtools::session_info('blogdown')
install.packages('devtools')
devtools::session_info('blogdown')
is.atomic(final_listing$price)
class(final_listing)
blogdown::build_site(build_rmd = 'newfile')
blogdown::build_site(build_rmd = 'newfile')
detach(package:neuralnet)
detach(package:neuralnet)
install.packages('neuralnet')
detach(package:neuralnet)
detach(package:neuralnet)
lapply(paste('package:',names(sessionInfo()$otherPkgs),sep=""),detach,character.only=TRUE,unload=TRUE)
lapply(names(sessionInfo()$loadedOnly), require, character.only = TRUE)
blogdown::build_site(build_rmd = 'newfile')
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = TRUE)
packages = c('tidyverse', 'ggplot2', 'skimr', 'naniar', 'kableExtra','dplyr', 'ggstatsplot','plotly',
'readr','haven','funModeling','crosstalk','data.table', 'skimr', 'ggmosaic','ggExtra','ggpubr',
'sf','tmap','sp', 'leaflet','widgetframe')
for(p in packages){
if(!require(p, character.only = T)){
install.packages(p)
}
library(p, character.only = T)
}
# make map interactive
tmap_mode('view')
htmlwidgets::saveWidget(frameableWidget(map),'tmap.html')
map
library(remotes)
install_github("mtennekes/tmaptools")
install_github("mtennekes/tmap")
blogdown::build_site(build_rmd = 'newfile')
blogdown::build_site(build_rmd = 'newfile')
blogdown::build_site(build_rmd = 'newfile')
blogdown::build_site(build_rmd = 'newfile')
blogdown::build_site(build_rmd = 'newfile')
blogdown::build_site(build_rmd = 'newfile')
